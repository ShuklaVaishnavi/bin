import React, { useState, useEffect } from 'react';
import { Handle, Position, Node, FlowElement } from 'react-flow-renderer';
import axios from 'axios';

interface INodeProps {
  data: {
    parentNode: string | null;
  };
}

const ColoredNode: React.FC<INodeProps & Node> = ({ id, data }) => {
  return (
    <div style={{ background: getNodeColor(id), width: '100px', height: '100px' }}>
      <Handle type="target" position={Position.Top} />
      <Handle type="source" position={Position.Bottom} />
    </div>
  );
};

const App = () => {
  const [nodes, setNodes] = useState<FlowElement[]>([]);
  const [allNodes, setAllNodes] = useState<Node[]>([]);

  useEffect(() => {
    const fetchNodes = async () => {
      try {
        const response = await axios.get('https://your-api-url');
        const data = response.data;
        const processedNodes: Node[] = data.map((item) => ({
          id: item.node,
          type: item.type || 'default',
          data: {
            label: item.node,
            value: item.value,
            graphDepth: item.graphDepth,
            parentNode: item.parentNode,
          },
          position: { x: 0, y: 0 },
          draggable: true,
          hidden: true,
          style: { backgroundColor: getNodeColor(item.node) },
        }));

        setAllNodes(processedNodes);

        // Set the first node (root node) as the initial node
        if (processedNodes.length > 0) {
          setNodes([{ ...processedNodes[0], hidden: false }]);
        }
      } catch (error) {
        console.error('Error fetching node data', error);
      }
    };

    fetchNodes();
  }, [setNodes]);

  const getNodeColor = (nodeId: string) => {
    const isLeaf = !allNodes.some((node) => node.data.parentNode === nodeId);
    return isLeaf ? 'red' : 'green';
  };

  return (
    <ReactFlow elements={nodes}>
      <Handle type="target" position={Position.Top} />
      <Handle type="source" position={Position.Bottom} />
    </ReactFlow>
  );
};

export default App;
