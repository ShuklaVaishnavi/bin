 import React, { useState, useRef, useCallback } from 'react';
import ReactFlow, { ReactFlowProvider, MiniMap, useStoreState, useStoreActions } from 'react-flow-renderer';
import 'react-flow-renderer/dist/style.css';

const CustomMinimap = () => {
  const minimapRef = useRef<HTMLDivElement>(null);
  const [dragging, setDragging] = useState(false);
  const transform = useStoreState((state) => state.transform);
  const setViewport = useStoreActions((actions) => actions.setViewport);

  const onMouseDown = () => {
    setDragging(true);
  };

  const onMouseMove = useCallback(
    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {
      if (!dragging) return;

      const rect = minimapRef.current!.getBoundingClientRect();
      const x = event.clientX - rect.left;
      const y = event.clientY - rect.top;

      const scale = rect.width / transform[2];
      const newX = x * transform[2];
      const newY = y * transform[2];

      setViewport({ x: newX, y: newY, zoom: transform[2] });
    },
    [dragging, transform, setViewport]
  );

  const onMouseUp = () => {
    setDragging(false);
  };

  return (
    <div
      ref={minimapRef}
      onMouseDown={onMouseDown}
      onMouseMove={onMouseMove}
      onMouseUp={onMouseUp}
      style={{ width: 200, height: 150, position: 'relative', border: '1px solid black' }}
    >
      <MiniMap nodeColor={(node) => 'blue'} />
      <div
        style={{
          position: 'absolute',
          top: `${transform[1] / transform[2]}px`,
          left: `${transform[0] / transform[2]}px`,
          width: `${200 / transform[2]}px`,
          height: `${150 / transform[2]}px`,
          border: '2px solid white',
          cursor: 'move',
        }}
      />
    </div>
  );
};

export default CustomMinimap;
