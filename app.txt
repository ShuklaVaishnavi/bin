import React, { useState, useCallback, useEffect } from 'react';
import ReactFlow, {
  MiniMap,
  Controls,
  Background,
  addEdge,
  useNodes,
  useEdges,
  ReactFlowProvider,
  Node,
  Edge,
  Connection,
  NodeMouseEventHandler,
} from 'react-flow-renderer';
import 'react-flow-renderer/dist/style.css';
import axios from 'axios';
import dagre from 'dagre';
import {
  graphContainerStyles,
  controlsLabelStyles,
  controlsSelectStyles,
  reactflowWrapperStyles,
  navbarStyles,
} from './styles';  // import the styles

interface NodeData {
  node: string;
  type?: string;
  value?: string;
  graphDepth: number;
  parentNode?: string | null;
}

const initialNodes: Node[] = [];

const initialEdges: Edge[] = [];

const dagreGraph = new dagre.graphlib.Graph();
dagreGraph.setDefaultEdgeLabel(() => ({}));

const getLayoutedNodes = (nodes: Node[], edges: Edge[], direction = 'TB') => {
  const nodeWidth = 172;
  const nodeHeight = 36;

  dagreGraph.setGraph({ rankdir: direction });

  nodes.forEach((node) => {
    dagreGraph.setNode(node.id, { width: nodeWidth, height: nodeHeight });
  });

  edges.forEach((edge) => {
    dagreGraph.setEdge(edge.source, edge.target);
  });

  dagre.layout(dagreGraph);

  return nodes.map((node) => {
    const nodeWithPosition = dagreGraph.node(node.id);
    node.position = {
      x: nodeWithPosition.x - nodeWidth / 2,
      y: nodeWithPosition.y - nodeHeight / 2,
    };
    return node;
  });
};

const getNodeColor = (node: Node) => {
  const hasChildren = allNodes.some(n => n.data.parentNode === node.id);
  if (!hasChildren) {
    // Leaf node
    return '#FF0000'; // Red
  } else {
    // Parent node
    return '#00FF00'; // Green
  }
};

const App: React.FC = () => {
  const [nodes, setNodes] = useNodes(initialNodes);
  const [edges, setEdges] = useEdges(initialEdges);
  const [allNodes, setAllNodes] = useState<Node[]>([]);
  const [allEdges, setAllEdges] = useState<Edge[]>([]);
  const [direction, setDirection] = useState('TB');
  const [selectedParentNode, setSelectedParentNode] = useState<string>('');

  useEffect(() => {
    // Replace with your API endpoint
    const fetchNodes = async () => {
      try {
        const response = await axios.get<NodeData[]>('https://api.example.com/nodes');
        const data = response.data;
        const processedNodes: Node[] = data.map((item) => ({
          id: item.node,
          type: item.type || 'default',
          data: {
            label: item.node,
            value: item.value,
            graphdepth: item.graphDepth,
            parentNode: item.parentNode,
          },
          position: { x: 0, y: 0 },
          draggable: true,
          hidden: true,
          style: { backgroundColor: getNodeColor(item) },
        }));

        const processedEdges: Edge[] = data
          .filter((item) => item.parentNode)
          .map((item) => ({
            id: `e-${item.parentNode}-${item.node}`,
            source: item.parentNode as string,
            target: item.node,
          }));

        setAllNodes(processedNodes);
        setAllEdges(processedEdges);

        // Set the first node (root node) as the initial node
        if (processedNodes.length > 0) {
          setNodes([{ ...processedNodes[0], hidden: false }]);
        }
      } catch (error) {
        console.error('Error fetching node data', error);
      }
    };

    fetchNodes();
  }, [setNodes]);

  const generateEdges = useCallback((nodeId: string) => {
    const newEdges = allNodes
      .filter(node => node.data.parentNode === nodeId)
      .map(node => ({
        id: `e-${node.data.parentNode}-${node.id}`,
        source: node.data.parentNode as string,
        target: node.id,
      }));
    setEdges(prevEdges => [...prevEdges, ...newEdges]);
  }, [allNodes, setEdges]);

  const onNodeClick: NodeMouseEventHandler = useCallback((event, node) => {
    const childNodes = allNodes.filter(n => n.data.parentNode === node.id);
    if (childNodes.length > 0) {
      const hiddenNodes = childNodes.filter(n => n.hidden);
      if (hiddenNodes.length > 0) {
        // Expand nodes
        hiddenNodes.forEach(child => {
          child.hidden = false;
        });
        setNodes(prevNodes => {
          const updatedNodes = [...prevNodes, ...hiddenNodes];
          return getLayoutedNodes(updatedNodes, edges, direction);
        });
        generateEdges(node.id);
      } else {
        // Collapse nodes
        setNodes(prevNodes => {
          const updatedNodes = prevNodes.map(n =>
            childNodes.some(child => child.id === n.id)
              ? { ...n, hidden: true }
              : n
          );
          const remainingEdges = edges.filter(
            edge => !childNodes.some(child => edge.target === child.id)
          );
          setEdges(remainingEdges);
          return getLayoutedNodes(updatedNodes, remainingEdges, direction);
        });
      }
    }
  }, [allNodes, edges, generateEdges, direction]);

  const onConnect = useCallback(
    (params: Edge | Connection) => setEdges((eds) => addEdge(params, eds)),
    [setEdges]
  );

  useEffect(() => {
    setNodes((nds) => getLayoutedNodes(nds, edges, direction));
  }, [edges, direction]);

  const handleParentNodeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const selectedNodeId = e.target.value;
    setSelectedParentNode(selectedNodeId);
    const selectedNode = allNodes.find(node => node.id === selectedNodeId);
    if (selectedNode) {
      setNodes([{ ...selectedNode, hidden: false }]);
      setEdges([]);
    }
  };

  return (
    <div style={graphContainerStyles}>
      <div style={navbarStyles}>
        <label style={controlsLabelStyles}>
          Direction:
          <select style={controlsSelectStyles} value={direction} onChange={(e) => setDirection(e.target.value)}>
            <option value="TB">Top-Bottom</option>
            <option value="BT">Bottom-Top</option>
            <option value="LR">Left-Right</option>
            <option value="RL">Right-Left</option>
          </select>
        </label>
        <label style={controlsLabelStyles}>
          Parent Node:
          <select style={controlsSelectStyles} value={selectedParentNode} onChange={handleParentNodeChange}>
            {allNodes.filter(node => !node.data.parentNode).map(node => (
              <option key={node.id} value={node.id}>
                {node.data.label}
              </option>
            ))}
          </select>
        </label>
      </div>
      <div style={reactflowWrapperStyles}>
        <ReactFlow
          elements={nodes.concat(edges)}
          onElementsRemove={() => {}}
          onConnect={onConnect}
          onNodeDoubleClick={() => {}}
          onElementClick={() => {}}
          onNodeDragStop={() => {}}
          onNodeMouseEnter={() => {}}
          onNodeMouseLeave={() => {}}
          onNodeContextMenu={() => {}}
          onSelectionChange={() => {}}
          onLoad={() => {}}
          onMove={() => {}}
          nodesDraggable={true}
          nodesConnectable={true}
          zoomOnScroll={true}
          zoomOnDoubleClick={true}
          paneMoveable={true}
        >
          <MiniMap />
          <Controls />
          <Background color="#aaa" gap={16} />
        </ReactFlow>
      </div>
    </div>
  );
};

const WrappedApp: React.FC = () => (
  <ReactFlowProvider>
    <App />
  </ReactFlowProvider>
);

export default WrappedApp;
