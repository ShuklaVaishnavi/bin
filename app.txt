import React, { useState, useCallback, useEffect } from 'react';
import ReactFlow, {
  MiniMap,
  Controls,
  Background,
  addEdge,
  useNodes,
  useEdges,
  ReactFlowProvider,
  Node,
  Edge,
  Connection,
  NodeMouseEventHandler,
} from 'react-flow-renderer';
import 'react-flow-renderer/dist/style.css';
import axios from 'axios';
import dagre from 'dagre';
import {
  graphContainerStyles,
  controlsLabelStyles,
  controlsSelectStyles,
  reactflowWrapperStyles,
  navbarStyles,
} from './styles'; // import your styles

interface NodeData {
  node: string;
  type?: string;
  value?: string;
  graphDepth: number;
  parentNode?: string | null;
}

const initialNodes: Node[] = [];
const initialEdges: Edge[] = [];

const dagreGraph = new dagre.graphlib.Graph();
dagreGraph.setDefaultEdgeLabel(() => ({}));

const getLayoutedNodes = (nodes: Node[], edges: Edge[], direction = 'TB') => {
  const nodeWidth = 172;
  const nodeHeight = 36;

  dagreGraph.setGraph({ rankdir: direction });

  nodes.forEach((node) => {
    dagreGraph.setNode(node.id, { width: nodeWidth, height: nodeHeight });
  });

  edges.forEach((edge) => {
    dagreGraph.setEdge(edge.source, edge.target);
  });

  dagre.layout(dagreGraph);

  return nodes.map((node) => {
    const nodeWithPosition = dagreGraph.node(node.id);
    node.position = {
      x: nodeWithPosition.x - nodeWidth / 2,
      y: nodeWithPosition.y - nodeHeight / 2,
    };
    return node;
  });
};

const getNodeColor = (node: Node) => {
  const hasChildren = allNodes.some(n => n.data.parentNode === node.id);
  if (!hasChildren) {
    // Leaf node
    return '#FF0000'; // Red
  } else {
    // Parent node
    return '#00FF00'; // Green
  }
};

const App: React.FC = () => {
  const [elements, setElements] = useState<Node[]>([]);
  const [direction, setDirection] = useState('TB');
  const [selectedParentNode, setSelectedParentNode] = useState<string>('');
  const [expandedNodes, setExpandedNodes] = useState<Set<string>>(new Set());

  useEffect(() => {
    const fetchNodes = async () => {
      try {
        const response = await axios.get<NodeData[]>('https://api.example.com/nodes');
        const data = response.data;
        const processedNodes: Node[] = data.map((item) => ({
          id: item.node,
          type: item.type || 'default',
          data: {
            label: item.node,
            value: item.value,
            graphdepth: item.graphDepth,
            parentNode: item.parentNode,
          },
          position: { x: 0, y: 0 },
          draggable: true,
          hidden: true,
          style: { backgroundColor: getNodeColor(item) },
        }));
        const processedEdges: Edge[] = data
          .filter((item) => item.parentNode)
          .map((item) => ({
            id: `e-${item.parentNode}-${item.node}`,
            source: item.parentNode as string,
            target: item.node,
          }));

        setElements(processedNodes.concat(processedEdges));

        // Set the first node (root node) as the initial node
        if (processedNodes.length > 0) {
          setElements((els) => [
            ...els,
            { ...processedNodes[0], hidden: false }
          ]);
        }
      } catch (error) {
        console.error('Error fetching node data', error);
      }
    };

    fetchNodes();
  }, []);

  const generateEdges = useCallback((nodeId: string) => {
    const newEdges = elements
      .filter((el) => el.type === 'node' && el.data.parentNode === nodeId)
      .map((el) => ({
        id: `e-${el.data.parentNode}-${el.id}`,
        source: el.data.parentNode as string,
        target: el.id,
      }));
    setElements((prevElements) => [...prevElements, ...newEdges]);
  }, [elements]);

  const expandNode = useCallback((node: Node) => {
    const childNodes = elements.filter((el) => el.type === 'node' && el.data.parentNode === node.id);
    if (childNodes.length > 0) {
      const newElements = [...elements];

      childNodes.forEach((child) => {
        const position = {
          x: node.position.x + (Math.random() - 0.5) * 200,
          y: node.position.y + 100,
        };
        newElements.push({
          ...child,
          position,
          hidden: false,
        });

        newElements.push({
          id: `${node.id}-${child.id}`,
          source: node.id,
          target: child.id,
          type: 'smoothstep',
          animated: false,
        });

        if (expandedNodes.has(child.id)) {
          expandNode(child);
        }
      });

      setElements(newElements);
    }
  }, [elements, expandedNodes]);

  const onNodeClick: NodeMouseEventHandler = useCallback((event, node) => {
    const currentExpandedNodes = new Set(expandedNodes);

    if (currentExpandedNodes.has(node.id)) {
      // Collapse the node
      currentExpandedNodes.delete(node.id);
      const elementsToKeep = elements.filter(
        (el) =>
          el.id !== node.id &&
          !elements.some((child) => child.type === 'edge' && child.source === node.id)
      );
      setElements(elementsToKeep);
    } else {
      // Expand the node
      currentExpandedNodes.add(node.id);
      expandNode(node);
    }

    setExpandedNodes(currentExpandedNodes);
  }, [elements, expandedNodes, expandNode]);

  const onConnect = useCallback(
    (params: Edge | Connection) => setElements((els) => addEdge(params, els)),
    []
  );

  const handleParentNodeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const selectedNodeId = e.target.value;
    setSelectedParentNode(selectedNodeId);
    const selectedNode = elements.find((el) => el.id === selectedNodeId && el.type === 'node');
    if (selectedNode) {
      setElements([
        { ...selectedNode, hidden: false }
      ]);
    }
  };

  // Get unique parent nodes for the dropdown
  const uniqueParentNodes = Array.from(new Set(elements.filter((el) => el.type === 'node').map((el) => el.data.parentNode))).filter(Boolean) as string[];

  return (
    <div style={graphContainerStyles}>
      <div style={navbarStyles}>
        <label style={controlsLabelStyles}>
          Direction:
          <select
            style={controlsSelectStyles}
            value={direction}
            onChange={(e) => setDirection(e.target.value)}
          >
            <option value="TB">Top-Bottom</option>
            <option value="BT">Bottom-Top</option>
            <option value="LR">Left-Right</option>
            <option value="RL">Right-Left</option>
          </select>
        </label>
        <label style={controlsLabelStyles}>
          Parent Node:
          <select
            style={controlsSelectStyles}
            value={selectedParentNode}
            onChange={handleParentNodeChange}
          >
            {uniqueParentNodes.map((nodeId) => {
              const node = elements.find((el) => el.id === nodeId && el.type === 'node');
              return node ? (
                <option key={node.id} value={node.id}>
                  {node.data.label}
                </option>
              ) : null;
            })}
          </select>
        </label>
      </div>
      <div style={reactflowWrapperStyles}>
        <ReactFlow
          elements={elements}
          onElementsRemove={() => {}}
          onConnect={onConnect}
          onLoad={() => {}}
          onMove={() => {}}
          nodesDraggable={true}
          nodesConnectable={true}
          zoomOnScroll={true}
          zoomOnDoubleClick={true}
          paneMoveable={true}
        >
          <MiniMap />
          <Controls />
          <Background color="#aaa" gap={16} />
        </ReactFlow>
      </div>
    </div>
  );
};

const WrappedApp: React.FC = () => (
  <ReactFlowProvider>
    <App />
  </ReactFlowProvider>
);

export default WrappedApp
