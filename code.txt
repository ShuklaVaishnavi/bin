CSV TO JSON:
import csv
import json
import os

# Define the path to your CSV file and the output JSON file
csv_file_path = 'data.csv'
json_file_path = 'data.json'

# Check if the CSV file exists
if not os.path.exists(csv_file_path):
    print(f"Error: The file {csv_file_path} does not exist.")
else:
    # Read the CSV file and convert to JSON
    csv_data = []
    with open(csv_file_path, mode='r', encoding='utf-8') as csv_file:
        csv_reader = csv.reader(csv_file)
        headers = next(csv_reader)  # Read the header row
        headers = headers[1:]  # Remove the first column header
        for row in csv_reader:
            # Remove the first column from each row
            row_data = row[1:]
            # Convert the row to a dictionary
            row_dict = dict(zip(headers, row_data))
            csv_data.append(row_dict)

    # Write the JSON data to a file
    with open(json_file_path, mode='w', encoding='utf-8') as json_file:
        json.dump(csv_data, json_file, indent=2)

    print(f'CSV file has been successfully converted to JSON and saved as {json_file_path}')



JSON AS DATA:
import React, { useState, useEffect, useMemo } from "react";
import { FixedSizeList as List } from "react-window";
import GraphWithProvider from "./components/HierarchicalGraph";

const controlsStyles = {
  marginBottom: "20px",
};

const controlsLabelStyles = {
  marginRight: "10px",
};

const controlsInputStyles = {
  marginRight: "10px",
};

const controlsSpanStyles = {
  fontWeight: "bold",
};

const graphContainerStyles = {
  height: "calc(100vh - 50px)", // Adjust the height based on your controls' height
  overflow: "hidden",
};

const App: React.FC = () => {
  const [sliderValue, setSliderValue] = useState<number>(0);
  const [rawData, setRawData] = useState<any[]>([]);

  useEffect(() => {
    // Fetch data from data.json
    fetch("data.json")
      .then((response) => response.json())
      .then((data) => {
        setRawData(data);
      })
      .catch((error) => console.error("Error fetching data:", error));
  }, []);

  // Use useMemo to memoize the processed data
  const processedData = useMemo(() => {
    // Process the rawData here if needed
    return rawData.map((item) => ({
      parent_node: item.parentNode,
      node: item.node,
      graph_depth: item.graphDepth,
      type: item.type,
      name: item.name,
      value: item.value,
    }));
  }, [rawData]);

  return (
    <div style={{ height: "100vh", overflow: "hidden" }}>
      <div style={controlsStyles}>
        <label style={controlsLabelStyles}>
          Slider Value:
          <input
            type="range"
            min="0"
            max="100"
            value={sliderValue}
            onChange={(e) => setSliderValue(parseInt(e.target.value, 10))}
            style={controlsInputStyles}
          />
          <span style={controlsSpanStyles}>{sliderValue}</span>
        </label>
      </div>
      <div style={graphContainerStyles}>
        <GraphWithProvider data={processedData} sliderValue={sliderValue} />
      </div>
    </div>
  );
};

export default App;



Expanding, collapsing pardha:
 const onNodeClick: NodeMouseHandler = useCallback((event, node) => {
    const childNodes = allNodes.filter(n => n.data.parentNode === node.id);
    if (childNodes.length > 0) {
      const hiddenNodes = childNodes.filter(n => n.hidden);
      if (hiddenNodes.length > 0) {
        // Expand nodes
        hiddenNodes.forEach(child => {
          child.hidden = false;
        });
        setNodes(prevNodes => {
          const updatedNodes = [...prevNodes, ...hiddenNodes];
          return getLayoutedNodes(updatedNodes, edges, direction);
        });
        generateEdges(node.id);
      } else {
        // Collapse nodes
        setNodes(prevNodes => {
          const updatedNodes = prevNodes.map(n =>
            childNodes.some(child => child.id === n.id)
              ? { ...n, hidden: true }
              : n
          );
          const remainingEdges = edges.filter(
            edge => !childNodes.some(child => edge.target === child.id)
          );
          setEdges(remainingEdges);
          return getLayoutedNodes(updatedNodes, remainingEdges, direction);
        });
      }
    }
  }, [allNodes, edges, generateEdges, direction]);
