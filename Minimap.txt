import React, { useState, useRef, useCallback } from 'react';
import ReactFlow, { ReactFlowProvider, MiniMap, useReactFlow } from 'react-flow-renderer';
import 'react-flow-renderer/dist/style.css';

const CustomMinimap = () => {
  const minimapRef = useRef<HTMLDivElement>(null);
  const [dragging, setDragging] = useState(false);
  const { setViewport } = useReactFlow();

  const onMouseDown = () => {
    setDragging(true);
  };

  const onMouseMove = useCallback(
    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {
      if (!dragging) return;

      const rect = minimapRef.current!.getBoundingClientRect();
      const x = event.clientX - rect.left;
      const y = event.clientY - rect.top;

      const newX = x * 2; // Adjust factor as needed
      const newY = y * 2; // Adjust factor as needed

      setViewport({ x: newX, y: newY, zoom: 2 }); // Adjust zoom level as needed
    },
    [dragging, setViewport]
  );

  const onMouseUp = () => {
    setDragging(false);
  };

  return (
    <div
      ref={minimapRef}
      onMouseDown={onMouseDown}
      onMouseMove={onMouseMove}
      onMouseUp={onMouseUp}
      style={{
        position: 'fixed',
        bottom: 10,
        right: 10,
        width: 200,
        height: 150,
        border: '1px solid black',
        zIndex: 999, // Ensure minimap is above other content
      }}
    >
      <MiniMap nodeColor={(node) => 'blue'} />
      <div
        style={{
          position: 'absolute',
          top: 0,
          left: 0,
          width: '100%',
          height: '100%',
          border: '2px solid white',
          pointerEvents: 'none', // Allow events to pass through the minimap box
          boxSizing: 'border-box',
        }}
      />
    </div>
  );
};

export default CustomMinimap;
