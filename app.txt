const onNodeClick: NodeMouseHandler = useCallback((event, node) => {
  const currentExpandedNodes = new Set(expandedNodes);

  if (currentExpandedNodes.has(node.id)) {
    // Collapse the node
    currentExpandedNodes.delete(node.id);

    // Remove nodes and edges
    const nodesToKeep = nodes.filter((n) => {
      if (n.id === node.id) return true; // Keep the collapsed node itself
      const isChild = allNodes.some((an) => an.data.parentNode === node.id && an.id === n.id);
      return !isChild;
    });

    const edgesToKeep = edges.filter((e) => {
      // Keep edges that are not connected to the collapsed node or its children
      return !(
        (e.source === node.id && currentExpandedNodes.has(e.target)) ||
        (e.target === node.id && currentExpandedNodes.has(e.source))
      );
    });

    setNodes(nodesToKeep);
    setEdges(edgesToKeep);
  } else {
    // Expand the node
    currentExpandedNodes.add(node.id);
    expandNode(node);
  }

  setExpandedNodes(new Set(currentExpandedNodes)); // Update expanded nodes set
}, [allNodes, nodes, edges, expandedNodes, expandNode]);
