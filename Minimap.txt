import React, { useState, useRef, useCallback, useEffect } from 'react';
import { MiniMap, useReactFlow } from 'react-flow-renderer';
import 'react-flow-renderer/dist/style.css';

const CustomMinimap = () => {
  const minimapRef = useRef<HTMLDivElement>(null);
  const [dragging, setDragging] = useState(false);
  const [transform, setTransform] = useState<[number, number, number]>([0, 0, 1]);
  const { setViewport } = useReactFlow();

  const onMouseDown = () => {
    setDragging(true);
  };

  const onMouseMove = useCallback(
    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {
      if (!dragging) return;

      const rect = minimapRef.current!.getBoundingClientRect();
      const x = event.clientX - rect.left;
      const y = event.clientY - rect.top;

      const minimapWidth = rect.width;
      const minimapHeight = rect.height;
      const scaleX = minimapWidth / window.innerWidth;
      const scaleY = minimapHeight / window.innerHeight;

      const newX = (x / scaleX - window.innerWidth / 2 / transform[2]) * transform[2];
      const newY = (y / scaleY - window.innerHeight / 2 / transform[2]) * transform[2];

      setViewport({ x: newX, y: newY, zoom: transform[2] });
    },
    [dragging, transform, setViewport]
  );

  const onMouseUp = () => {
    setDragging(false);
  };

  const updateTransform = useCallback(() => {
    const flowElement = document.querySelector('.react-flow__viewport') as HTMLDivElement;
    if (flowElement) {
      const transformValues = getComputedStyle(flowElement).transform.match(/matrix\((.*)\)/);
      if (transformValues && transformValues[1]) {
        const values = transformValues[1].split(',').map(parseFloat);
        const newTransform: [number, number, number] = [values[4], values[5], values[0]];
        setTransform(newTransform);
      }
    }
  }, []);

  useEffect(() => {
    updateTransform();
    const interval = setInterval(updateTransform, 1000);
    return () => clearInterval(interval);
  }, [updateTransform]);

  return (
    <div
      ref={minimapRef}
      onMouseDown={onMouseDown}
      onMouseMove={onMouseMove}
      onMouseUp={onMouseUp}
      style={{
        position: 'fixed',
        bottom: 10,
        right: 10,
        width: 200,
        height: 150,
        border: '1px solid black',
        zIndex: 999,
      }}
    >
      <MiniMap nodeColor={(node) => 'blue'} />
    </div>
  );
};

export default CustomMinimap;
