import React, { useState, useCallback, useEffect } from 'react';
import ReactFlow, {
  MiniMap,
  Controls,
  Background,
  addEdge,
  useNodes,
  useEdges,
  ReactFlowProvider,
  Node,
  Edge,
  Connection,
  NodeMouseEventHandler,
} from 'react-flow-renderer';
import axios from 'axios';
import dagre from 'dagre';
import './styles.css'; // Import your custom styles

interface NodeData {
  node: string;
  type?: string;
  value?: string;
  graphDepth: number;
  parentNode?: string | null;
}

const initialNodes: Node[] = [];
const initialEdges: Edge[] = [];

const dagreGraph = new dagre.graphlib.Graph();
dagreGraph.setDefaultEdgeLabel(() => ({}));

const getLayoutedNodes = (nodes: Node[], edges: Edge[], direction = 'TB') => {
  const nodeWidth = 172;
  const nodeHeight = 36;

  dagreGraph.setGraph({ rankdir: direction });

  nodes.forEach((node) => {
    dagreGraph.setNode(node.id, { width: nodeWidth, height: nodeHeight });
  });

  edges.forEach((edge) => {
    dagreGraph.setEdge(edge.source, edge.target);
  });

  dagre.layout(dagreGraph);

  return nodes.map((node) => {
    const nodeWithPosition = dagreGraph.node(node.id);
    node.position = {
      x: nodeWithPosition.x - nodeWidth / 2,
      y: nodeWithPosition.y - nodeHeight / 2,
    };
    return node;
  });
};

const getNodeColor = (node: Node) => {
  const hasChildren = allNodes.some(n => n.data.parentNode === node.id);
  if (!hasChildren) {
    // Leaf node
    return '#FF0000'; // Red
  } else {
    // Parent node
    return '#00FF00'; // Green
  }
};

const App: React.FC = () => {
  const [elements, setElements] = useState<any>([]);
  const [direction, setDirection] = useState<string>('TB');
  const [selectedParentNode, setSelectedParentNode] = useState<string>('');
  const [expandedNodes, setExpandedNodes] = useState<Set<string>>(new Set());
  
  const [nodes, setNodes, onNodesChange] = useNodes(initialNodes);
  const [edges, setEdges, onEdgesChange] = useEdges(initialEdges);

  useEffect(() => {
    const fetchNodes = async () => {
      try {
        const response = await axios.get<NodeData[]>('https://api.example.com/nodes');
        const data = response.data;

        const processedNodes: Node<any>[] = data.map((item) => ({
          id: item.node,
          type: item.type || 'default',
          data: {
            label: item.node,
            value: item.value,
            graphdepth: item.graphDepth,
            parentNode: item.parentNode,
          },
          position: { x: 0, y: 0 },
          draggable: true,
          style: { backgroundColor: getNodeColor(item) },
        }));

        const processedEdges: Edge<any>[] = data
          .filter((item) => item.parentNode)
          .map((item) => ({
            id: `e-${item.parentNode}-${item.node}`,
            source: item.parentNode as string,
            target: item.node,
          }));

        setElements(processedNodes.concat(processedEdges));

        // Set the first node (root node) as the initial node
        if (processedNodes.length > 0) {
          setNodes((prevNodes) => [
            ...prevNodes,
            { ...processedNodes[0], hidden: false }
          ]);
        }
      } catch (error) {
        console.error('Error fetching node data', error);
      }
    };

    fetchNodes();
  }, []);

  const generateEdges = useCallback((nodeId: string) => {
    const newEdges = elements
      .filter((el: any) => el.data.parentNode === nodeId)
      .map((el: any) => ({
        id: `e-${el.data.parentNode}-${el.id}`,
        source: el.data.parentNode as string,
        target: el.id,
      }));
    setEdges((prevEdges: any) => [...prevEdges, ...newEdges]);
  }, [elements, setEdges]);

  const expandNode = useCallback((node: Node) => {
    const childNodes = elements.filter((el: any) => el.data.parentNode === node.id);
    if (childNodes.length > 0) {
      const newNodes = [...nodes];
      const newEdges = [...edges];

      childNodes.forEach((child: any) => {
        const position = {
          x: node.position.x + (Math.random() - 0.5) * 200,
          y: node.position.y + 100,
        };
        newNodes.push({
          ...child,
          position,
          hidden: false,
        });

        newEdges.push({
          id: `${node.id}-${child.id}`,
          source: node.id,
          target: child.id,
          type: 'smoothstep',
          animated: false,
        });

        if (expandedNodes.has(child.id)) {
          expandNode(child);
        }
      });

      setNodes(newNodes);
      setEdges(newEdges);
    }
  }, [elements, nodes, edges, expandedNodes]);

  const onNodeClick: NodeMouseEventHandler = useCallback((event, node) => {
    const currentExpandedNodes = new Set(expandedNodes);

    if (currentExpandedNodes.has(node.id)) {
      // Collapse the node
      currentExpandedNodes.delete(node.id);
      const nodesToKeep = nodes.filter(
        (n) =>
          !elements
            .filter((el: any) => el.data.parentNode === node.id)
            .some((child: any) => child.id === n.id)
      );
      const edgesToKeep = edges.filter(
        (e) =>
          !elements
            .filter((el: any) => el.data.parentNode === node.id)
            .some((child: any) => e.source === node.id && e.target === child.id)
      );
      setNodes(nodesToKeep);
      setEdges(edgesToKeep);
    } else {
      // Expand the node
      currentExpandedNodes.add(node.id);
      expandNode(node);
    }

    setExpandedNodes(currentExpandedNodes);
  }, [elements, nodes, edges, expandedNodes, expandNode]);

  const onConnect = useCallback(
    (params: Edge | Connection) => setEdges((eds: any) => addEdge(params, eds)),
    [setEdges]
  );

  useEffect(() => {
    setNodes((nds) => getLayoutedNodes(nds, edges, direction));
  }, [edges, direction]);

  const handleParentNodeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const selectedNodeId = e.target.value;
    setSelectedParentNode(selectedNodeId);
    const selectedNode = elements.find((el: any) => el.id === selectedNodeId);
    if (selectedNode) {
      setNodes((prevNodes: any) => [
        { ...selectedNode, hidden: false }
      ]);
      setEdges([]);
    }
  };

  // Get unique parent nodes for the dropdown
  const uniqueParentNodes = Array.from(new Set(elements.map((el: any) => el.data.parentNode))).filter(Boolean) as string[];

  return (
    <div style={{ height: '100vh', backgroundColor: '#f0f0f0' }}>
      <div style={{ display: 'flex', flexDirection: 'column', height: '100%' }}>
        <div style={{ padding: '10px', borderBottom: '1px solid #ccc', backgroundColor: '#fff' }}>
          <label style={{ marginRight: '10px' }}>
            Direction:
            <select
              value={direction}
              onChange={(e) => setDirection(e.target.value)}
            >
              <option value="TB">Top-Bottom</option>
              <option value="BT">Bottom-Top</option>
              <option value="LR">Left-Right</option>
              <option value="RL">Right-Left</option>
            </select>
          </label>
          <label>
            Parent Node:
            <select
              value={selectedParentNode}
              onChange={handleParentNodeChange}
            >
              {uniqueParentNodes.map((nodeId) => {
                const node = elements.find((el: any) => el.id === nodeId);
                return node ? (
                  <option key={node.id} value={node.id}>
                    {node.data.label}
                  </option>
                ) : null;
              })}
            </select>
          </label>
        </div>
        <div style={{ flexGrow: 1, position: 'relative' }}>
          <ReactFlow
            elements={elements}
            onNodeMouseEnter={(event, node) => console.log('mouse enter:', node)}
            onNodeMouseLeave={(event, node) => console.log('mouse leave:', node)}
            onNodeContextMenu={(event, node) => {
              event.preventDefault();
              console.log('context menu:', node);
            }}
            onNodeClick={onNodeClick}
            onConnect={onConnect}
            snapToGrid={true}
            snapGrid={[15, 15]}
          >
            <MiniMap />
            <Controls />
            <Background color="#aaa" gap={16} />
          </ReactFlow>
        </div>
      </div>
    </div>
  );
};

const WrappedApp: React.FC = () => (
  <ReactFlowProvider>
    <App />
  </ReactFlowProvider>
);

export default WrappedApp;
