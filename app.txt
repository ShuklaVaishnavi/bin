const onNodeClick: NodeMouseHandler = useCallback((event, node) => {
  const currentExpandedNodes = new Set(expandedNodes);

  if (currentExpandedNodes.has(node.id)) {
    // Collapse the node
    currentExpandedNodes.delete(node.id);
    const nodesToKeep = nodes.filter(
      (n) =>
        !allNodes
          .filter((an) => an.data.parentNode === node.id)
          .some((child) => child.id === n.id)
    );
    const edgesToKeep = edges.filter(
      (e) =>
        !allNodes
          .filter((an) => an.data.parentNode === node.id)
          .some((child) => e.source === node.id && e.target === child.id)
    );
    setNodes(nodesToKeep);
    setEdges(edgesToKeep);
  } else {
    // Expand the node
    currentExpandedNodes.add(node.id);
    expandNode(node);
  }

  setExpandedNodes(currentExpandedNodes);
}, [allNodes, nodes, edges, expandedNodes, expandNode]);
